'use strict'; const isChartZoomed = 'ow2-chart-custom-zoom'; const isChartZoomScroll = 'ow2-chart-custom-zoom-scroll'; const isCustomDateRange = 'ow2-chart-custom-daterange'; const timeRangeKey = 'ow2-chart-time-range'; const startDayKey = 'ow2-chart-start-day'; const endDayKey = 'ow2-chart-end-day'; const startDateTimeKey = 'ow2-chart-start-datetime'; const endDateTimeKey = 'ow2-chart-end-datetime'; const pickerChosenLabelKey = 'ow2-chart-picker-label'; const zoomtimeRangeKey = 'ow2-chart-zoom-time-range'; const zoomStartDayKey = 'ow2-chart-zoom-start-day'; const zoomEndDayKey = 'ow2-chart-zoom-end-day'; const zoomStartDateTimeKey = 'ow2-chart-zoom-start-datetime'; const zoomEndDateTimeKey = 'ow2-chart-zoom-end-datetime'; const zoomChartIdKey = 'ow2-chart-zoom-id'; django.jQuery(function ($) {
    $(document).ready(function () {
        var pickerStart, pickerEnd, pickerDays, pickerChosenLabel, end = moment(); var range = localStorage.getItem(timeRangeKey) || $('#monitoring-timeseries-default-time').data('value'); var start = localStorage.getItem(isCustomDateRange) === 'true' ? moment() : moment().subtract(range.split('d')[0], 'days'); var last1DayLabel = gettext('Last 1 Day'); var last3DaysLabel = gettext('Last 3 Days'); var last7DaysLabel = gettext('Last 7 Days'); var last30DaysLabel = gettext('Last 30 Days'); var last365DaysLabel = gettext('Last 365 Days'); var customDateRangeLabel = gettext('Custom Range'); function addDateRangePickerLabel(startDate, endDate) { $('#daterangepicker-widget span').html(startDate + ' - ' + endDate); }
        function initDateRangePickerWidget(start, end) { addDateRangePickerLabel(start.format('MMMM D, YYYY'), end.format('MMMM D, YYYY')); $(`[data-range-key='${last1DayLabel}']`).attr('data-time', '1d'); $(`[data-range-key='${last3DaysLabel}']`).attr('data-time', '3d'); $(`[data-range-key='${last7DaysLabel}']`).attr('data-time', '7d'); $(`[data-range-key='${last30DaysLabel}']`).attr('data-time', '30d'); $(`[data-range-key='${last365DaysLabel}']`).attr('data-time', '365d'); $(`[data-range-key='${customDateRangeLabel}']`).attr('data-time', customDateRangeLabel); }
        $('#daterangepicker-widget').daterangepicker({ startDate: start, endDate: end, maxDate: moment(), maxSpan: { "year": 1, }, locale: { applyLabel: gettext('Apply'), cancelLabel: gettext('Cancel'), customRangeLabel: gettext(customDateRangeLabel), }, ranges: { [`${last1DayLabel}`]: [moment().subtract(1, 'days'), moment()], [`${last3DaysLabel}`]: [moment().subtract(3, 'days'), moment()], [`${last7DaysLabel}`]: [moment().subtract(7, 'days'), moment()], [`${last30DaysLabel}`]: [moment().subtract(30, 'days'), moment()], [`${last365DaysLabel}`]: [moment().subtract(365, 'days'), moment()], } }, initDateRangePickerWidget); initDateRangePickerWidget(start, end); function setDateRangePickerWidget(pickerStartDate, pickerEndDate) { addDateRangePickerLabel(pickerStartDate.format('MMMM D, YYYY'), pickerEndDate.format('MMMM D, YYYY')); $('#daterangepicker-widget').data('daterangepicker').setStartDate(moment(pickerStartDate.format('MMMM D, YYYY')).format('MM/DD/YYYY')); $('#daterangepicker-widget').data('daterangepicker').setEndDate(moment(pickerEndDate.format('MMMM D, YYYY')).format('MM/DD/YYYY')); }
        function isMonitoringChartsLocation() { return window.location.hash === '#ow-chart-container' || window.location.pathname === '/admin/'; }
        function handleChartZoomChange(chartsContainers) {
            if (!isMonitoringChartsLocation()) { return; }
            var zoomCharts = document.getElementsByClassName(chartsContainers); $('.js-plotly-plot').on("click dblclick mouseover mouseout", function () {
                var zoomChartId = $(this).parent().prop('id'); if (zoomChartId === 'chart-0') { var activeChartsLocation = window.location.hash; zoomChartId = activeChartsLocation === '#ow-chart-container' ? 'container' : 'ow-chart-inner-container'; }
                localStorage.setItem(zoomChartIdKey, zoomChartId);
            }); for (var zoomChart of zoomCharts) {
                if (!zoomChart) { localStorage.setItem(isChartZoomed, false); localStorage.setItem(isCustomDateRange, false); return; }
                zoomChart.on('plotly_relayout', function (eventdata) {
                    var eventEnd = eventdata['xaxis.range[1]']; var eventStart = eventdata['xaxis.range[0]']; if (!isMonitoringChartsLocation()) { return; }
                    if (!eventEnd && !eventStart) { localStorage.setItem(isChartZoomed, false); localStorage.setItem(isCustomDateRange, false); localStorage.setItem(isChartZoomScroll, true); var daysBeforeZoom = localStorage.getItem(timeRangeKey); var initialStartLabel = localStorage.getItem(startDayKey) || moment().format('MMMM D, YYYY'); var initialEndLabel = localStorage.getItem(endDayKey) || moment().format('MMMM D, YYYY'); var initialStartDate = moment(initialStartLabel, 'MMMM D, YYYY'); var initialEndDate = moment(initialEndLabel, 'MMMM D, YYYY'); setDateRangePickerWidget(initialStartDate, initialEndDate); loadCharts(daysBeforeZoom, true); clearInterval(window.owChartRefresh); window.owChartRefresh = setInterval(loadFetchedCharts, 1000 * 60 * 2.5, daysBeforeZoom); return; }
                    var pickerEndDate = moment(eventEnd); var pickerStartDate = moment(eventStart); var pickerDays = pickerEndDate.diff(pickerStartDate, 'days') + 'd'; if (pickerDays === '0d') { pickerDays = '1d'; }
                    localStorage.setItem(zoomStartDateTimeKey, pickerStartDate.format('YYYY-MM-DD HH:mm:ss')); localStorage.setItem(zoomEndDateTimeKey, pickerEndDate.format('YYYY-MM-DD HH:mm:ss')); localStorage.setItem(zoomStartDayKey, pickerStartDate.format('MMMM D, YYYY')); localStorage.setItem(zoomEndDayKey, pickerEndDate.format('MMMM D, YYYY')); localStorage.setItem(isChartZoomScroll, true); localStorage.setItem(isChartZoomed, true); localStorage.setItem(isCustomDateRange, true); localStorage.setItem(zoomtimeRangeKey, pickerDays); setDateRangePickerWidget(pickerStartDate, pickerEndDate); loadCharts(pickerDays, true); clearInterval(window.owChartRefresh); window.owChartRefresh = setInterval(loadFetchedCharts, 1000 * 60 * 2.5, pickerDays);
                });
            }
        }
        function triggerZoomCharts(containerClassName) { handleChartZoomChange(containerClassName); const zoomChartContainer = document.getElementById(localStorage.getItem(zoomChartIdKey)); if (localStorage.getItem(isChartZoomScroll) === 'true' && zoomChartContainer) { zoomChartContainer.scrollIntoView(); } }
        var chartQuickLinks, chartContents = $('#ow-chart-contents'), fallback = $('#ow-chart-fallback'), defaultTimeRange = localStorage.getItem(timeRangeKey) || $('#monitoring-timeseries-default-time').data('value'), apiUrl = $('#monitoring-timeseries-api-url').data('value'), baseUrl = `${apiUrl}?time=`, globalLoadingOverlay = $('#loading-overlay'), localLoadingOverlay = $('#chart-loading-overlay'), getChartFetchUrl = function (time) {
            var url = baseUrl + time; if (localStorage.getItem(isCustomDateRange) === 'true' || localStorage.getItem(pickerChosenLabelKey) === customDateRangeLabel) {
                var startDate = localStorage.getItem(startDateTimeKey); var endDate = localStorage.getItem(endDateTimeKey); if (localStorage.getItem(isChartZoomed) === 'true') { endDate = localStorage.getItem(zoomEndDateTimeKey); startDate = localStorage.getItem(zoomStartDateTimeKey); }
                const now = moment().format('YYYY-MM-DD HH:mm:ss'); const endDateTime = moment(endDate).format('YYYY-MM-DD HH:mm:ss'); endDate = endDateTime > now ? now : endDateTime; url = `${apiUrl}?start=${startDate}&end=${endDate}`; var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone; if (timezone) { url = `${url}&timezone=Asia/Kolkata`; }
            }
            if ($('#org-selector').val()) { var orgSlug = $('#org-selector').val(); url = `${url}&organization_slug=${orgSlug}`; }
            return url;
        }, createCharts = function (data) {
            $.each(data.charts, function (i, chart) {
                var htmlId = 'chart-' + i, chartDiv = $('#' + htmlId), chartQuickLink = chartQuickLinks[chart.title]; if (!chartDiv.length) { chartContents.append('<div id="' + htmlId + '" class="ow-chart">' + '<div class="js-plotly-plot"></div></div>'); }
                createChart(chart, data.x, htmlId, chart.title, chart.type, chartQuickLink);
            });
        }, addOrganizationSelector = function (data) {
            var orgSelector = $('#org-selector'); if (data.organizations === undefined) { return; }
            if (orgSelector.data('select2-id') === 'org-selector') { return; }
            orgSelector.parent().show(); orgSelector.select2({ data: data.organizations, allowClear: true, placeholder: gettext('Organization Filter') }); orgSelector.show();
        }, loadCharts = function (time, showLoading) {
            $.ajax(getChartFetchUrl(time), {
                dataType: 'json', xhrFields: { withCredentials: true }, beforeSend: function () {
                    chartContents.hide(); chartContents.empty(); fallback.hide(); if (showLoading) { globalLoadingOverlay.show(); }
                    localLoadingOverlay.show();
                }, success: function (data) {
                    localLoadingOverlay.hide(); if (data.charts.length) { chartContents.show(); } else { fallback.show(); }
                    createCharts(data); addOrganizationSelector(data);
                }, error: function (response) {
                    var errorMessage = gettext('Something went wrong while loading the charts'); if (response.responseJSON) { if (response.responseJSON.constructor === Array) { errorMessage = errorMessage + ': ' + response.responseJSON.join(' '); } }
                    alert(errorMessage);
                }, complete: function () { triggerZoomCharts('js-plotly-plot'); localLoadingOverlay.fadeOut(200, function () { if (showLoading) { globalLoadingOverlay.fadeOut(200); } }); }
            });
        }; try { chartQuickLinks = JSON.parse($('#monitoring-chart-quick-links').html()); } catch (error) { chartQuickLinks = {}; }
        window.triggerChartLoading = function () {
            var range = localStorage.getItem(timeRangeKey) || defaultTimeRange; var startLabel = localStorage.getItem(startDayKey) || moment().format('MMMM D, YYYY'); var endLabel = localStorage.getItem(endDayKey) || moment().format('MMMM D, YYYY'); localStorage.setItem(isChartZoomScroll, false); localStorage.setItem(isChartZoomed, false); if (localStorage.getItem(isCustomDateRange) === 'true') { addDateRangePickerLabel(startLabel, endLabel); var startDate = moment(startLabel, 'MMMM D, YYYY'); var endDate = moment(endLabel, 'MMMM D, YYYY'); $('#daterangepicker-widget').data('daterangepicker').setStartDate(moment(startDate).format('MM/DD/YYYY')); $('#daterangepicker-widget').data('daterangepicker').setEndDate(moment(endDate).format('MM/DD/YYYY')); loadCharts(range, true); }
            else { endLabel = moment().format('MMMM D, YYYY'); startLabel = moment().subtract(range.split('d')[0], 'days').format('MMMM D, YYYY'); addDateRangePickerLabel(startLabel, endLabel); $('.daterangepicker .ranges ul li[data-time=' + range + ']').trigger('click'); }
        }; try { var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone; if (timezone) { baseUrl = baseUrl.replace('time=', 'timezone=' + 'Asia/Kolkata' + '&time='); } } catch (e) { }
        $("#daterangepicker-widget").on('apply.daterangepicker', function (ev, picker) { pickerChosenLabel = picker.chosenLabel; pickerStart = moment(picker.startDate.format('YYYY-MM-DD HH:mm:ss')); pickerEnd = moment(picker.endDate.format('YYYY-MM-DD HH:mm:ss')); pickerDays = pickerEnd.diff(pickerStart, 'days') + 'd'; localStorage.setItem(pickerChosenLabelKey, pickerChosenLabel); localStorage.setItem(startDateTimeKey, picker.startDate.format('YYYY-MM-DD HH:mm:ss')); localStorage.setItem(endDateTimeKey, picker.endDate.format('YYYY-MM-DD HH:mm:ss')); localStorage.setItem(startDayKey, pickerStart.format('MMMM D, YYYY')); localStorage.setItem(endDayKey, pickerEnd.format('MMMM D, YYYY')); localStorage.setItem(isChartZoomed, false); localStorage.setItem(isChartZoomScroll, false); localStorage.setItem(timeRangeKey, pickerDays); localStorage.setItem(isCustomDateRange, pickerChosenLabel === "Custom Range"); loadCharts(pickerDays, true); clearInterval(window.owChartRefresh); window.owChartRefresh = setInterval(loadFetchedCharts, 1000 * 60 * 2.5, pickerDays); }); $('#ow-chart-export').click(function () {
            var queryString, queryParams = { 'csv': 1 }; queryParams.time = localStorage.getItem(timeRangeKey); if (localStorage.getItem(isCustomDateRange) === 'true' || localStorage.getItem(pickerChosenLabelKey) === customDateRangeLabel) {
                queryParams.start = localStorage.getItem(startDateTimeKey); queryParams.end = localStorage.getItem(endDateTimeKey); if (localStorage.getItem(isChartZoomed) === 'true') { queryParams.time = localStorage.getItem(zoomtimeRangeKey); queryParams.end = localStorage.getItem(zoomEndDateTimeKey); queryParams.start = localStorage.getItem(zoomStartDateTimeKey); }
                timezone = Intl.DateTimeFormat().resolvedOptions().timeZone; if (timezone) { queryParams.timezone = `Asia/Kolkata`; }
            }
            if ($('#org-selector').val()) { queryParams.organization_slug = $('#org-selector').val(); }
            queryString = Object.keys(queryParams).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`).join('&'); location.href = `${apiUrl}?${queryString}`;
        }); function loadFetchedCharts(time) { $.ajax(getChartFetchUrl(time), { dataType: 'json', success: function (data) { if (data.charts.length) { createCharts(data); triggerZoomCharts('js-plotly-plot'); } }, error: function () { window.console.error('Unable to fetch chart data.'); }, }); }
        $('#org-selector').change(function () { loadCharts(localStorage.getItem(timeRangeKey) || defaultTimeRange, true); });
    });
}(django.jQuery));